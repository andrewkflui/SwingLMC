/***************************************************************
 *
 * Interactive LMC based on Swing
 * Copyright (c) 2007 Dr. Andrew Kwok-Fai LUI
 * The Open University of Hong Kong
 *
 * Enhance the learning effectiveness of students through greater interactions
 */
/*  This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
package faifai.swinglmc;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import javax.swing.filechooser.FileFilter;
import java.io.FileReader;
import java.io.PrintWriter;
import javax.swing.AbstractAction;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.text.Document;
import javax.swing.text.JTextComponent;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;

/**
 *
 * @author  alui
 */
public class EditorPanel extends javax.swing.JPanel implements CaretListener {
  
  private Font font1 = new java.awt.Font("Courier New", 0, 11);
  private Font font2 = new java.awt.Font("Courier New", 0, 16);
  private Font font3 = new java.awt.Font("Courier New", Font.BOLD, 20);
  private final UndoManager undo = new UndoManager();
  
  /** Creates new form EditorPanel */
  public EditorPanel() {
    initComponents();
    jTextArea1.addCaretListener(this);
    mapUndo(jTextArea1);
  }
  
  public void undo() {
    try {
      if (undo.canUndo()) {
        undo.undo();
      }
    } catch (CannotUndoException e) {}
  }
  
  public void redo() {
    try {
      if (undo.canRedo()) {
        undo.redo();
      }
    } catch (CannotRedoException e) {}
  }
  
  private void mapUndo(JTextComponent comp) {
    Document doc = comp.getDocument();
    // Listen for undo and redo events
    doc.addUndoableEditListener(new UndoableEditListener() {
      public void undoableEditHappened(UndoableEditEvent evt) {
        undo.addEdit(evt.getEdit());
      }});
      // Create an undo action and add it to the text component
      comp.getActionMap().put("Undo", new AbstractAction("Undo") {
        public void actionPerformed(ActionEvent evt) {
          undo();
        }
      });
      // Bind the undo action to ctl-Z
      comp.getInputMap().put(KeyStroke.getKeyStroke("control Z"), "Undo");
      // Create a redo action and add it to the text component
      comp.getActionMap().put("Redo",  new AbstractAction("Redo") {
        public void actionPerformed(ActionEvent evt) {
          redo();
        }});
        // Bind the redo action to ctl-Y
        comp.getInputMap().put(KeyStroke.getKeyStroke("control Y"), "Redo");
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jScrollPane1 = new javax.swing.JScrollPane();
    jTextArea1 = new javax.swing.JTextArea();
    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jComboBox1 = new javax.swing.JComboBox();

    setLayout(new java.awt.GridBagLayout());

    setMinimumSize(new java.awt.Dimension(360, 480));
    setPreferredSize(new java.awt.Dimension(360, 480));
    jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
    jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    jScrollPane1.setMinimumSize(new java.awt.Dimension(320, 240));
    jScrollPane1.setPreferredSize(new java.awt.Dimension(320, 480));
    jTextArea1.setColumns(20);
    jTextArea1.setFont(new java.awt.Font("Courier New", 0, 11));
    jTextArea1.setRows(5);
    jTextArea1.setTabSize(4);
    jScrollPane1.setViewportView(jTextArea1);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    add(jScrollPane1, gridBagConstraints);

    jPanel1.setLayout(new java.awt.GridLayout(1, 0));

    jPanel1.setMinimumSize(new java.awt.Dimension(100, 25));
    jPanel1.setPreferredSize(new java.awt.Dimension(100, 25));
    jLabel1.setFont(new java.awt.Font("Arial", 0, 9));
    jLabel1.setText("CTRL-Z/CTRL-Y to Undo/Redo");
    jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jPanel1.add(jLabel1);

    jComboBox1.setFont(new java.awt.Font("Arial", 0, 10));
    jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Plain", "Line Wrap" }));
    jComboBox1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        linewrapActionPerformed(evt);
      }
    });

    jPanel1.add(jComboBox1);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    add(jPanel1, gridBagConstraints);

  }// </editor-fold>//GEN-END:initComponents
  
  private void linewrapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linewrapActionPerformed
    int index = jComboBox1.getSelectedIndex();
    jTextArea1.setLineWrap(index != 0);
  }//GEN-LAST:event_linewrapActionPerformed
  
  private void updateStatus() {
    int caretPos = jTextArea1.getCaretPosition();
    try {
      int line = jTextArea1.getLineOfOffset(caretPos) + 1;
      jLabel1.setText("Line: " + line);
    } catch (Exception ex) {
      jLabel1.setText("");
    }
  }
  
  public void setFontSize(int size) {
    switch (size) {
      case 1:
        jTextArea1.setFont(font1); break;
      case 2:
        jTextArea1.setFont(font2); break;
      case 3:
        jTextArea1.setFont(font3); break;
    }
  }
  
  public void caretUpdate(CaretEvent e) {
    updateStatus();
  }
  
  protected JFileChooser openFileChooser = null;
  protected JFileChooser saveFileChooser = null;
  
  public void saveFile() {
    File selectedFile = null;
    if (saveFileChooser == null) {
      saveFileChooser = new JFileChooser();
      //saveFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
      saveFileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
      //saveFileChooser.setFileFilter(new LMCFileFilter());
    }
    saveFileChooser.setDialogTitle("Save Assembly Program");
    int result = saveFileChooser.showSaveDialog(null);
    if (result == saveFileChooser.CANCEL_OPTION)
      return;
    selectedFile = saveFileChooser.getSelectedFile();
    String name = selectedFile.getName();
    if (!name.toLowerCase().endsWith(".lmc"))
      selectedFile = new File(selectedFile.getParentFile(), name + ".lmc");
    try {
      PrintWriter writer = new PrintWriter(new FileOutputStream(selectedFile));
      writer.println(jTextArea1.getText());
      writer.close();
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(this, "File Save Error");
    }
  }
  
  public void loadFile() {
    File selectedFile = null;
    if (openFileChooser == null) {
      openFileChooser = new JFileChooser();
      //openFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
      openFileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
      openFileChooser.setFileFilter(new LMCFileFilter());
    }
    openFileChooser.setDialogTitle("Open Assembly Program");
    int result = openFileChooser.showOpenDialog(null);
    if (result == openFileChooser.CANCEL_OPTION)
      return;
    selectedFile = openFileChooser.getSelectedFile();
    try {
      BufferedReader reader = new BufferedReader(new FileReader(selectedFile));
      String line = null;
      StringBuffer buffer = new StringBuffer();
      while ((line = reader.readLine()) != null) {
        buffer.append(line);
        buffer.append("\r\n");
      }
      jTextArea1.setText(buffer.toString());
      reader.close();
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(this, "File Open Error");
    }
  }
  
  public String getProgram() {
    return jTextArea1.getText();
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox jComboBox1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextArea jTextArea1;
  // End of variables declaration//GEN-END:variables
  
}

class LMCFileFilter extends FileFilter {
  public boolean accept(File f) {
    String name = f.getName();
    if (name.toLowerCase().endsWith(".lmc"))
      return true;
    if (f.isDirectory())
      return true;
    return false;
  }
  
  public String getDescription() {
    return "LMC files (.lmc)";
  }
}
