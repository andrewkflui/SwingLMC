/***************************************************************
 *
 * Interactive LMC based on Swing
 * Copyright (c) 2007 Dr. Andrew Kwok-Fai LUI
 * The Open University of Hong Kong
 *
 * Enhance the learning effectiveness of students through greater interactions
 */
/*  This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
package faifai.swinglmc;

import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JRadioButtonMenuItem;

public class LMCDecimalFrame extends javax.swing.JFrame {
  
  private int memory[] = new int[100];
  private Thread executeThread = null;
  private ExecutionController executeController = null;
  
  /** Creates new form LMCDecimal */
  public LMCDecimalFrame() {
    try {
        javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
    } catch (Exception ex) {
    }
    initComponents();
    ButtonGroup group = new ButtonGroup();
    group.add(jRadioButtonMenuItem1);
    group.add(jRadioButtonMenuItem2);
    group.add(jRadioButtonMenuItem3);
  }
  
  public void setStatus(String status) {
    jLabel1.setText(status);
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    editorPanel1 = new faifai.swinglmc.EditorPanel();
    memoryPanelDecimal1 = new faifai.swinglmc.MemoryPanelDecimal();
    processorPanel1 = new faifai.swinglmc.ProcessorPanel();
    outputPanel1 = new faifai.swinglmc.OutputPanel();
    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jPanel2 = new javax.swing.JPanel();
    jButton1 = new javax.swing.JButton();
    jButton2 = new javax.swing.JButton();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    jMenuItem1 = new javax.swing.JMenuItem();
    jMenuItem2 = new javax.swing.JMenuItem();
    jMenuItem3 = new javax.swing.JMenuItem();
    jMenu5 = new javax.swing.JMenu();
    jMenuItem10 = new javax.swing.JMenuItem();
    jMenuItem11 = new javax.swing.JMenuItem();
    jMenu2 = new javax.swing.JMenu();
    jMenuItem8 = new javax.swing.JMenuItem();
    jMenuItem9 = new javax.swing.JMenuItem();
    jMenuItem4 = new javax.swing.JMenuItem();
    jMenuItem5 = new javax.swing.JMenuItem();
    jMenuItem6 = new javax.swing.JMenuItem();
    jMenu4 = new javax.swing.JMenu();
    jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
    jRadioButtonMenuItem3 = new javax.swing.JRadioButtonMenuItem();
    jRadioButtonMenuItem2 = new javax.swing.JRadioButtonMenuItem();
    jMenu3 = new javax.swing.JMenu();
    jMenuItem7 = new javax.swing.JMenuItem();

    getContentPane().setLayout(new java.awt.GridBagLayout());

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("LMC Decimal");
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosed(java.awt.event.WindowEvent evt) {
        formWindowClosed(evt);
      }
    });

    editorPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Editor", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 0, 102)));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(editorPanel1, gridBagConstraints);

    memoryPanelDecimal1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Memory", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 0, 102)));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    gridBagConstraints.weightx = 1.0;
    getContentPane().add(memoryPanelDecimal1, gridBagConstraints);

    processorPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Processor", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11), new java.awt.Color(102, 0, 102)));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    gridBagConstraints.weightx = 1.0;
    getContentPane().add(processorPanel1, gridBagConstraints);

    outputPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Output Buffer", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11), new java.awt.Color(102, 0, 102)));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(outputPanel1, gridBagConstraints);

    jPanel1.setLayout(new java.awt.GridBagLayout());

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Status", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 0, 102)));
    jLabel1.setFont(new java.awt.Font("Arial", 0, 10));
    jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jLabel1.setMinimumSize(new java.awt.Dimension(120, 16));
    jLabel1.setPreferredSize(new java.awt.Dimension(120, 16));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    jPanel1.add(jLabel1, gridBagConstraints);

    jPanel2.setLayout(new java.awt.GridLayout(1, 0));

    jButton1.setFont(new java.awt.Font("Arial", 0, 9));
    jButton1.setText("Step");
    jButton1.setEnabled(false);
    jButton1.setMinimumSize(new java.awt.Dimension(51, 18));
    jButton1.setPreferredSize(new java.awt.Dimension(51, 18));
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        stepExecuteActionPerformed(evt);
      }
    });

    jPanel2.add(jButton1);

    jButton2.setFont(new java.awt.Font("Arial", 0, 9));
    jButton2.setText("Stop");
    jButton2.setEnabled(false);
    jButton2.setMinimumSize(new java.awt.Dimension(51, 18));
    jButton2.setPreferredSize(new java.awt.Dimension(51, 18));
    jButton2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        stopExecuteActionPerformed(evt);
      }
    });

    jPanel2.add(jButton2);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel1.add(jPanel2, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    getContentPane().add(jPanel1, gridBagConstraints);

    jMenu1.setText("File");
    jMenuItem1.setText("Open");
    jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        openActionPerformed(evt);
      }
    });

    jMenu1.add(jMenuItem1);

    jMenuItem2.setText("Save");
    jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveActionPerformed(evt);
      }
    });

    jMenu1.add(jMenuItem2);

    jMenuItem3.setText("Quit");
    jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        quitActionPerformed(evt);
      }
    });

    jMenu1.add(jMenuItem3);

    jMenuBar1.add(jMenu1);

    jMenu5.setText("Editor");
    jMenuItem10.setText("Undo (CTRL-Z)");
    jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        undoActionPerformed(evt);
      }
    });

    jMenu5.add(jMenuItem10);

    jMenuItem11.setText("Redo (CTRL-Y)");
    jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        redoActionPerformed(evt);
      }
    });

    jMenu5.add(jMenuItem11);

    jMenuBar1.add(jMenu5);

    jMenu2.setText("Tool");
    jMenuItem8.setText("Assemble and Execute");
    jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        assembleExecuteActionPerformed(evt);
      }
    });

    jMenu2.add(jMenuItem8);

    jMenuItem9.setText("Assemble and Execute Slow");
    jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        assembleExecuteSlowActionPerformed(evt);
      }
    });

    jMenu2.add(jMenuItem9);

    jMenuItem4.setText("Assemble");
    jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        assembleActionPerformed(evt);
      }
    });

    jMenu2.add(jMenuItem4);

    jMenuItem5.setText("Execute");
    jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        executeActionPerformed(evt);
      }
    });

    jMenu2.add(jMenuItem5);

    jMenuItem6.setText("Execute Slow");
    jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        executeSlowActionPerformed(evt);
      }
    });

    jMenu2.add(jMenuItem6);

    jMenuBar1.add(jMenu2);

    jMenu4.setText("View");
    jRadioButtonMenuItem1.setSelected(true);
    jRadioButtonMenuItem1.setText("Small Text");
    jRadioButtonMenuItem1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        textSizeActionPerformed(evt);
      }
    });

    jMenu4.add(jRadioButtonMenuItem1);

    jRadioButtonMenuItem3.setText("Medium Text");
    jRadioButtonMenuItem3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        textSizeActionPerformed(evt);
      }
    });

    jMenu4.add(jRadioButtonMenuItem3);

    jRadioButtonMenuItem2.setText("Large Text");
    jRadioButtonMenuItem2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        textSizeActionPerformed(evt);
      }
    });

    jMenu4.add(jRadioButtonMenuItem2);

    jMenuBar1.add(jMenu4);

    jMenu3.setText("About");
    jMenuItem7.setText("LMC Decimal");
    jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        aboutActionPerformed(evt);
      }
    });

    jMenu3.add(jMenuItem7);

    jMenuBar1.add(jMenu3);

    setJMenuBar(jMenuBar1);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoActionPerformed
      editorPanel1.undo();
  }//GEN-LAST:event_undoActionPerformed

  private void redoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoActionPerformed
      editorPanel1.redo();
  }//GEN-LAST:event_redoActionPerformed
    
    private void textSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textSizeActionPerformed
      JRadioButtonMenuItem source = (JRadioButtonMenuItem)evt.getSource();
      int fontSize = 1;
      if (source.getText().startsWith("Small")) {
        fontSize = 1;
      } else if (source.getText().startsWith("Medium")) {
        fontSize = 2;
      } else if (source.getText().startsWith("Large")) {
        fontSize = 3;
      }
      editorPanel1.setFontSize(fontSize);
      memoryPanelDecimal1.setFontSize(fontSize);
      processorPanel1.setFontSize(fontSize);
      outputPanel1.setFontSize(fontSize);
    }//GEN-LAST:event_textSizeActionPerformed
    
  private void assembleExecuteSlowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assembleExecuteSlowActionPerformed
    try {
      assemble();
      jMenu2.setEnabled(false);
      execute(1000);
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(this, ex.getMessage());
    }
  }//GEN-LAST:event_assembleExecuteSlowActionPerformed
  
  private void stepExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepExecuteActionPerformed
    executeThread.interrupt();
  }//GEN-LAST:event_stepExecuteActionPerformed
  
  private void stopExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopExecuteActionPerformed
    executeController.stop();
    executeThread.interrupt();
  }//GEN-LAST:event_stopExecuteActionPerformed
  
  private void assemble() throws Exception {
    String lmcprogram = editorPanel1.getProgram();
    AssemblerDecimal.assemble(lmcprogram, memory);
    MemoryDecimal.setData(memory);
    memoryPanelDecimal1.update();
  }
  
  private void execute(int cycleTime) {
    executeController = new ExecutionController(cycleTime);
    executeThread = new Thread(executeController);
    executeThread.start();
  }
  
  private void assembleExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assembleExecuteActionPerformed
    try {
      assemble();
      jMenu2.setEnabled(false);
      execute(10);
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(this, ex.getMessage());
    }
  }//GEN-LAST:event_assembleExecuteActionPerformed
  
  private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
    String message = "<html>Interactive LMC Simulator<br>Developed by Dr. Andrew Kwok-Fai Lui</html>";
    JOptionPane.showMessageDialog(null, message);
  }//GEN-LAST:event_aboutActionPerformed
  
  private void executeSlowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeSlowActionPerformed
    //int result = JOptionPane.showConfirmDialog(this, "Are you sure to start execution?",
    //        "Confirm Execute Dialog", JOptionPane.OK_CANCEL_OPTION);
    //if (result == JOptionPane.CANCEL_OPTION)
    //  return;
    jMenu2.setEnabled(false);
    execute(1000);
  }//GEN-LAST:event_executeSlowActionPerformed
  
  private void executeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeActionPerformed
    //int result = JOptionPane.showConfirmDialog(this, "Are you sure to start execution?",
    //        "Confirm Execute Dialog", JOptionPane.OK_CANCEL_OPTION);
    //if (result == JOptionPane.CANCEL_OPTION)
    //  return;
    execute(10);
  }//GEN-LAST:event_executeActionPerformed
  
  private void assembleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assembleActionPerformed
    //int result = JOptionPane.showConfirmDialog(this, "Are you sure to assemble the program and overwrite the memory?",
    //        "Confirm Assemble Dialog", JOptionPane.OK_CANCEL_OPTION);
    //if (result == JOptionPane.CANCEL_OPTION)
    //  return;
    try {
      assemble();
      JOptionPane.showMessageDialog(this, "Assembling Completed");
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(this, ex.getMessage());
    }
  }//GEN-LAST:event_assembleActionPerformed
  
  private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
    editorPanel1.saveFile();
  }//GEN-LAST:event_saveActionPerformed
  
  private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
    editorPanel1.loadFile();
  }//GEN-LAST:event_openActionPerformed
  
  private void quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitActionPerformed
    System.exit(0);
  }//GEN-LAST:event_quitActionPerformed
  
  private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    System.exit(0);
  }//GEN-LAST:event_formWindowClosed
  
  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new LMCDecimalFrame().setVisible(true);
      }
    });
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private faifai.swinglmc.EditorPanel editorPanel1;
  private javax.swing.JButton jButton1;
  private javax.swing.JButton jButton2;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenu jMenu2;
  private javax.swing.JMenu jMenu3;
  private javax.swing.JMenu jMenu4;
  private javax.swing.JMenu jMenu5;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenuItem jMenuItem1;
  private javax.swing.JMenuItem jMenuItem10;
  private javax.swing.JMenuItem jMenuItem11;
  private javax.swing.JMenuItem jMenuItem2;
  private javax.swing.JMenuItem jMenuItem3;
  private javax.swing.JMenuItem jMenuItem4;
  private javax.swing.JMenuItem jMenuItem5;
  private javax.swing.JMenuItem jMenuItem6;
  private javax.swing.JMenuItem jMenuItem7;
  private javax.swing.JMenuItem jMenuItem8;
  private javax.swing.JMenuItem jMenuItem9;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
  private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem2;
  private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem3;
  private faifai.swinglmc.MemoryPanelDecimal memoryPanelDecimal1;
  private faifai.swinglmc.OutputPanel outputPanel1;
  private faifai.swinglmc.ProcessorPanel processorPanel1;
  // End of variables declaration//GEN-END:variables
    
    private class ExecutionController implements Runnable {
      private int cycleTime = 10;
      private boolean toStop = false;
      ExecutionController(int cycleTime) {
        this.cycleTime = cycleTime;
      }
      public void stop() {
        toStop = true;
      }
      public void run() {
        jMenu2.setEnabled(false);
        jButton1.setEnabled(true);
        jButton2.setEnabled(true);
        setStatus("");
        Processor.reset();
        OutputBuffer.clear();
        while (true) {
          outputPanel1.update();
          memoryPanelDecimal1.setCurrentAddress(Processor.programCounter);
          memoryPanelDecimal1.update();
          processorPanel1.update();
          try {
            if (!Processor.executeInstruction()) {
              setStatus("Execution Completed");
              break;
            }
          } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
            setStatus("Execution Error");
            break;
          }
          
          try {
            Thread.currentThread().sleep(cycleTime);
          } catch (Exception ex) {
          }
          if (toStop) {
            setStatus("Execution Stopped");
            break;
          }
        }
        outputPanel1.update();
        memoryPanelDecimal1.update();
        processorPanel1.update();
        jMenu2.setEnabled(true);
        jButton1.setEnabled(false);
        jButton2.setEnabled(false);
      }
    }
    
}
